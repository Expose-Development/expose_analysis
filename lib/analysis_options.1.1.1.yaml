analyzer:
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

  errors:
    close_sinks: ignore
    missing_required_param: error
    missing_return: error
    record_literal_one_positional_no_trailing_comma: error
    collection_methods_unrelated_type: warning
    unrelated_type_equality_checks: warning

  exclude:
    - "test/.test_coverage.dart"
    - lib/generated_plugin_registrant.dart

formatter:
  page_width: 110

linter:
  rules:
    - unsafe_variance
    - unnecessary_async
    #- specify_nonobvious_property_types
    - strict_top_level_inference
    - unnecessary_underscores
    - always_declare_return_types
    - always_put_required_named_parameters_first
    - always_use_package_imports
    - annotate_overrides
    - avoid_bool_literals_in_conditional_expressions
    - avoid_catches_without_on_clauses
    - avoid_catching_errors
    - avoid_double_and_int_checks
    - avoid_dynamic_calls
    - avoid_empty_else
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_escaping_inner_quotes
    - avoid_field_initializers_in_const_classes
    - avoid_final_parameters
    - avoid_function_literals_in_foreach_calls
    - avoid_init_to_null
    - avoid_js_rounded_ints
    - avoid_multiple_declarations_per_line
    - avoid_print
    - avoid_private_typedef_functions
    - avoid_redundant_argument_values
    - avoid_relative_lib_imports
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    - avoid_returning_null_for_void
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_shadowing_type_parameters
    - avoid_single_cascade_in_expression_statements
    - avoid_slow_async_io
    - avoid_type_to_string
    - avoid_types_as_parameter_names
    - avoid_unnecessary_containers
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - avoid_web_libraries_in_flutter
    - await_only_futures
    - camel_case_extensions
    - camel_case_types
    - cancel_subscriptions
    - cascade_invocations
    - cast_nullable_to_non_nullable
    - collection_methods_unrelated_type
    - combinators_ordering
    - comment_references
    - conditional_uri_does_not_exist
    - constant_identifier_names
    - control_flow_in_finally
    - curly_braces_in_flow_control_structures
    - dangling_library_doc_comments
    - depend_on_referenced_packages
    - deprecated_consistency
    - directives_ordering
    - document_ignores
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
    - eol_at_end_of_file
    - exhaustive_cases
    - file_names
    - flutter_style_todos
    - hash_and_equals
    - implicit_call_tearoffs
    - implementation_imports
    - implicit_reopen
    - invalid_case_patterns
    - invalid_runtime_check_with_js_interop_types
    - join_return_with_assignment
    - leading_newlines_in_multiline_strings
    - library_annotations
    - library_prefixes
    - library_private_types_in_public_api
    - literal_only_boolean_expressions
    - missing_code_block_language_in_doc_comment
    - missing_whitespace_between_adjacent_strings
    - no_adjacent_strings_in_list
    - no_default_cases
    - no_duplicate_case_values
    - no_leading_underscores_for_library_prefixes
    - no_leading_underscores_for_local_identifiers
    - no_logic_in_create_state
    - no_runtimeType_toString
    - no_self_assignments
    - no_wildcard_variable_uses
    - non_constant_identifier_names
    - noop_primitive_operations
    - null_check_on_nullable_type_parameter
    - null_closures
    - only_throw_errors
    - overridden_fields
    - package_names
    - parameter_assignments
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    - prefer_asserts_with_message
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_contains
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_for_elements_to_map_fromIterable
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_iterable_whereType
    - prefer_null_aware_method_calls
    - prefer_null_aware_operators
    - prefer_single_quotes
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - provide_deprecation_message
    - recursive_getters
    #- require_trailing_commas
    - secure_pubspec_urls
    - sized_box_for_whitespace
    - sized_box_shrink_expand
    - slash_for_doc_comments
    - sort_child_properties_last
    - sort_constructors_first
    - sort_unnamed_constructors_first
    - test_types_in_equals
    - throw_in_finally
    - tighten_type_of_initializing_formals
    - type_annotate_public_apis
    - type_init_formals
    - type_literal_in_constant_pattern
    - unawaited_futures
    - unintended_html_in_doc_comment
    - unnecessary_await_in_return
    - unnecessary_breaks
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_constructor_name
    - unnecessary_getters_setters
    - unnecessary_lambdas
    - unnecessary_late
    - unnecessary_library_directive
    - unnecessary_library_name
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_checks
    - unnecessary_null_in_if_null_operators
    - unnecessary_nullable_for_final_variable_declarations
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unnecessary_statements
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - unnecessary_to_list_in_spreads
    - unrelated_type_equality_checks
    - use_build_context_synchronously
    - use_colored_box
    - use_enums
    - use_full_hex_values_for_flutter_colors
    - use_function_type_syntax_for_parameters
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    - use_key_in_widget_constructors
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_raw_strings
    - use_rethrow_when_possible
    - use_setters_to_change_properties
    - use_string_buffers
    - use_string_in_part_of_directives
    - use_super_parameters
    - use_test_throws_matchers
    - use_to_and_as_if_applicable
    - valid_regexps
    - void_checks

dart_code_metrics:
  formatter:
    indent: 0
    line-length: 110
    cascading-widget-extensions: false

  rules:
    #  Flutter rules
    - prefer-align-over-container
    - prefer-transform-over-container
    - prefer-spacing
    - prefer-container
    - prefer-sized-box-square
    - avoid-flexible-outside-flex
    - prefer-center-over-align
    - prefer-padding-over-container
    - avoid-incorrect-image-opacity
    - always-remove-listener
    - avoid-empty-setstate
    - avoid-incomplete-copy-with
    #- avoid-missing-image-alt
    - avoid-recursive-widget-calls
    - avoid-state-constructors
    - avoid-undisposed-instances:
        ignored-instances:
          - FormControl
          - FormGroup
          - FormArray
    - avoid-unnecessary-overrides-in-state
    - avoid-unnecessary-setstate
    - avoid-unnecessary-stateful-widgets
    - check-for-equals-in-render-object-setters
    - dispose-fields
    - prefer-dedicated-media-query-methods
    - proper-super-calls
    - use-setstate-synchronously
    - avoid-border-all
    - avoid-expanded-as-spacer
    - avoid-inherited-widget-in-initstate
    - avoid-late-context
    - avoid-missing-controller
    - avoid-returning-widgets
    - avoid-shrink-wrap-in-lists
    - avoid-single-child-column-or-row
    - avoid-unnecessary-gesture-detector
    - avoid-stateless-widget-initialized-fields
    - prefer-action-button-tooltip
    - prefer-const-border-radius
    - prefer-define-hero-tag
    #- prefer-single-widget-per-file:
    #    ignore-private-widgets: true
    - prefer-sliver-prefix
    - prefer-text-rich
    - prefer-using-list-view
    - prefer-widget-private-members:
        ignore-static: true


    # Dart rules
    - avoid-complex-arithmetic-expressions
    #- prefer-commenting-future-delayed
    #- avoid-if-with-many-branches
    #- prefer-class-destructuring
    - use-existing-destructuring
    #- avoid-continue
    #- prefer-switch-expression
    - avoid-future-ignore
    - avoid-single-field-destructuring
    - prefer-assigning-await-expressions
    - avoid-unnecessary-patterns
    - avoid-adjacent-strings
    - prefer-for-in
    - prefer-add-all
    - avoid-incorrect-uri
    - function-always-returns-same-value
    - avoid-negations-in-equality-checks
    - prefer-simpler-boolean-expressions
    - avoid-late-final-reassignment
    - use-existing-variable
    - avoid-complex-loop-conditions
    - avoid-misused-set-literals
    - dispose-class-fields
    - avoid-suspicious-super-overrides
    - newline-before-method
    - arguments-ordering:
        last:
          - child
          - children
    - avoid-unsafe-reduce
    - handle-throwing-invocations
    - prefer-abstract-final-static-class
    - avoid-only-rethrow
    - avoid-accessing-collections-by-constant-index
    - avoid-collection-equality-checks
    - avoid-multi-assignment
    #- prefer-single-declaration-per-file
    - avoid-accessing-other-classes-private-members
    - avoid-async-call-in-sync-function
    #- avoid-barrel-files
    #- avoid-non-ascii-symbols
    - avoid-bottom-type-in-patterns
    - avoid-bottom-type-in-records
    - avoid-cascade-after-if-null
    - avoid-casting-to-extension-type
    - avoid-collapsible-if
    - avoid-collection-methods-with-unrelated-types
    - avoid-conditions-with-boolean-literals
    - avoid-contradictory-expressions
    - avoid-declaring-call-method
    - avoid-double-slash-imports
    - avoid-duplicate-cascades
    - avoid-duplicate-collection-elements
    - avoid-duplicate-exports
    - avoid-duplicate-initializers
    - avoid-duplicate-map-keys
    - avoid-duplicate-named-imports
    - avoid-duplicate-patterns
    - avoid-duplicate-switch-case-conditions
    - avoid-duplicate-test-assertions
    - avoid-dynamic
    - avoid-empty-spread
    - avoid-empty-test-groups
    - avoid-equal-expressions
    - avoid-excessive-expressions
    - avoid-explicit-pattern-field-name
    - avoid-explicit-type-declaration
    - avoid-extensions-on-records
    - avoid-function-type-in-records
    - avoid-future-tostring
    - avoid-generics-shadowing
    - avoid-global-state
    - avoid-identical-exception-handling-blocks
    - avoid-importing-entrypoint-exports
    - avoid-inverted-boolean-checks
    - avoid-keywords-in-wildcard-pattern
    - avoid-local-functions
    - avoid-long-files:
        max-length: 400
    - avoid-long-functions:
        max-length: 100
        ignored-names:
          - build
          - builder
    - avoid-long-parameter-list:
        ignore-optional: true
        max-number: 6
        ignored-names:
          - copyWith
    - avoid-long-records:
        max-number: 4
    - avoid-map-keys-contains
    - avoid-missed-calls
    - avoid-missing-completer-stack-trace
    - avoid-missing-enum-constant-in-map
    - avoid-missing-interpolation
    - avoid-misused-wildcard-pattern
    - avoid-mixing-named-and-positional-fields
    - avoid-mutating-parameters
    - avoid-negated-conditions
    - avoid-nested-conditional-expressions:
        acceptable-level: 2
    - avoid-nested-extension-types
    - avoid-nested-futures
    - avoid-nested-records
    - avoid-nested-streams-and-futures
    - avoid-nested-switch-expressions
    - avoid-nested-switches
    - avoid-non-null-assertion
    - avoid-not-encodable-in-to-json
    - avoid-nullable-interpolation
    - avoid-nullable-parameters-with-default-values
    - avoid-nullable-tostring
    - avoid-one-field-records
    #- avoid-passing-async-when-sync-expected
    - avoid-passing-default-values
    - avoid-passing-self-as-argument
    - avoid-positional-record-field-access
    - avoid-recursive-calls
    - avoid-redundant-async
    - avoid-redundant-else
    - avoid-redundant-positional-field-name
    - avoid-redundant-pragma-inline
    - avoid-referencing-discarded-variables
    - avoid-renaming-representation-getters
    - avoid-returning-void
    - avoid-self-assignment
    - avoid-self-compare
    - avoid-shadowed-extension-methods
    - avoid-shadowing:
        ignored-names:
          - context
          - state
    - avoid-slow-collection-methods
    - avoid-throw-in-catch-block
    - avoid-throw-objects-without-tostring
    - avoid-top-level-members-in-tests
    - avoid-unassigned-late-fields
    - avoid-unassigned-stream-subscriptions
    - avoid-uncaught-future-errors
    - avoid-unconditional-break
    - avoid-unknown-pragma
    - avoid-unnecessary-conditionals
    - avoid-unnecessary-futures
    - avoid-unnecessary-if
    - avoid-unnecessary-local-late
    - avoid-unnecessary-negations
    - avoid-unnecessary-nullable-return-type
    - avoid-unnecessary-reassignment
    - avoid-unnecessary-return
    - avoid-unnecessary-super
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - avoid-unrelated-type-casts
    # Not used because exactly safe references are highlighted
    #- avoid-unsafe-collection-methods
    - avoid-unused-after-null-check
    - avoid-unused-generics
    - avoid-unused-instances
    - avoid-unused-parameters
    - avoid-weak-cryptographic-algorithms
    - avoid-wildcard-cases-with-enums
    - binary-expression-operand-order
    - double-literal-format:
        explicit-trailing-zero: false
    # Not used because it is sometimes convenient to arrange enums in a certain order
    #- enum-constants-ordering
    - format-comment:
        only-doc-comments: false
    #- format-test-name
    - function-always-returns-null
    - map-keys-ordering
    - match-getter-setter-field-names
    - match-lib-folder-structure
    - match-positional-field-names-on-assignment
    - member-ordering:
        order:
          - constructors
          - named-constructor
          - public-fields
          - private-fields
          - public-getters
          - private-getters
          - public-setters
          - private-setters
          - close-method
          - dispose-method
          - public-methods
          - private-methods
        widgets-order:
          - constructor
          - named-constructor
          - const-fields
          - final-fields
          - init-state-method
          - did-change-dependencies-method
          - did-update-widget-method
          - dispose-method
          - private-methods
          - overriden-public-methods
          - build-method
    - missing-test-assertion
    - move-records-to-typedefs:
        min-fields: 3
    - move-variable-closer-to-its-usage
    - move-variable-outside-iteration
    - newline-before-case
    - newline-before-return
    - no-boolean-literal-compare
    - no-empty-block
    - no-equal-conditions
    - no-equal-nested-conditions
    - no-equal-switch-case
    - no-equal-switch-expression-cases
    - no-equal-then-else
    - no-object-declaration
    #- prefer-addition-subtraction-assignments
    - prefer-any-or-every
    - prefer-bytes-builder
    - prefer-conditional-expressions
    #- prefer-correct-callback-field-name:
    #    name-pattern: ^on[A-Z]+|^[A-z]+(Builder)$
    - prefer-correct-error-name:
        allowed-names: [ error, exception, failure ]
    - prefer-correct-for-loop-increment
    #- prefer-correct-future-return-type
    - prefer-correct-identifier-length:
        max-identifier-length: 30
        min-identifier-length: 2
    - prefer-correct-json-casts
    - prefer-correct-setter-parameter-name
    - prefer-correct-stream-return-type
    - prefer-correct-switch-length
    - prefer-correct-test-file-name
    - prefer-correct-type-name
    - prefer-declaring-const-constructor:
        ignore-abstract: true
    - prefer-early-return:
        ignore-if-case: true
    - prefer-enums-by-name
    - prefer-explicit-function-type
    - prefer-explicit-parameter-names
    - prefer-explicit-type-arguments
    - prefer-first
    - prefer-immediate-return
    - prefer-iterable-of
    - prefer-last
    - prefer-match-file-name:
        exclude:
          - "test/**"
          - "lib/**/*wm.dart"
    - prefer-moving-to-variable:
        allowed-duplicated-chains: 3
    - prefer-named-boolean-parameters:
        ignore-single: true
        ignore-single-boolean: false

    #- prefer-named-imports
    - prefer-null-aware-spread
    - prefer-overriding-parent-equality
    - prefer-parentheses-with-if-null
    - prefer-private-extension-type-field
    - prefer-public-exception-classes
    - prefer-return-await
    - prefer-simpler-patterns-null-check
    - prefer-specific-cases-first
    - prefer-switch-with-enums
    - prefer-test-matchers
    #- prefer-trailing-comma
    - prefer-type-over-var
    - prefer-unique-test-names
    - prefer-visible-for-testing-on-members
    - prefer-wildcard-pattern
    #- unnecessary-trailing-comma

    # Bloc rules
    - avoid-bloc-public-fields
    - emit-new-bloc-state-instances
    - prefer-bloc-extensions
    - prefer-provider-extensions
    - handle-bloc-event-subclasses
    - avoid-passing-build-context-to-blocs
    - avoid-duplicate-bloc-event-handlers
    - avoid-passing-bloc-to-bloc
    - check-is-not-closed-after-async-gap
    - prefer-correct-bloc-provider
    - prefer-multi-bloc-provider

    # Fake async rules
    - avoid-async-callback-in-fake-async

    # Get It rules
    - avoid-functions-in-register-singleton

    # Intl rules
    - prefer-date-format
    - prefer-intl-name
    - prefer-providing-intl-description
    - prefer-providing-intl-examples
    - provide-correct-intl-args